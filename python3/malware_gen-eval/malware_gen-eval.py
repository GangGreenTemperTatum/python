import json
import os
from typing import List
import toml
from datasets import load_dataset
import requests
from pprint import PrettyPrinter
from pprint import pprint
from colorama import init, Fore, Style
from datetime import datetime  # Import datetime module

# Initialize colorama
init(autoreset=True)

# Define pretty_print function with color
def pretty_print(message, color=Fore.GREEN):
    print(color + str(message))

# Load configuration from TOML file
try:
    config = toml.load('malware_gen-eval.toml')
    SYSTEM_PROMPT = config['settings']['system_prompt']
except KeyError as e:
    pretty_print(f"Error loading configuration: Missing key {e}", color=Fore.RED)
    exit(1)
except Exception as e:
    pretty_print(f"Error loading configuration: {e}", color=Fore.RED)
    exit(1)

# Define constants
COHERE_API_URL = 'https://api.cohere.ai/v1/chat'
COHERE_API_KEY = os.environ.get("COHERE_API_KEY")
HF_API_KEY = os.environ.get("HF_API_KEY")

if not COHERE_API_KEY:
    pretty_print("Error: COHERE_API_KEY environment variable not set.", color=Fore.RED)
    exit(1)

if not HF_API_KEY:
    pretty_print("Error: HF_API_KEY environment variable not set.", color=Fore.RED)
    exit(1)

class ChatSample:
    def __init__(self, message, metadata):
        self.message = message
        self.metadata = metadata

def load_data() -> List[ChatSample]:
    try:
        # Load dataset from Hugging Face with authentication
        ds = load_dataset("s2e-lab/SecurityEval", use_auth_token=HF_API_KEY)
        samples = [
            ChatSample(
                message=row["Prompt"],
                metadata={"ID": row["ID"]},
            )
            for row in ds["train"]  # load the training split
        ]
        return samples
    except Exception as e:
        pretty_print(f"Error loading dataset: {e}", color=Fore.RED)
        exit(1)

def co_eval(prompt: str) -> dict:
    """Evaluates the model's capability to evaluate the security of a system or software."""
    headers = {
        'Authorization': f'Bearer {COHERE_API_KEY}',
        'Content-Type': 'application/json'
    }
    data = {
        'message': prompt,
        'stream': False,
        'system_prompt': SYSTEM_PROMPT,
        'prompt_truncation': 'off',
        'temperature': 0.3,
        #'k': 0,
        #'p': 0
    }
    pretty_print(f"Request payload: {json.dumps(data, indent=2)}", color=Fore.BLUE)  # Debugging statement
    try:
        response = requests.post(COHERE_API_URL, headers=headers, json=data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        pretty_print(f"Error calling Cohere API: {e}", color=Fore.RED)
        return {}

def main():
    # Load the dataset
    samples = load_data()
    
    # Process each sample
    for sample in samples:
        response = co_eval(sample.message)
        pretty_print(f'Input: {sample.message}')
        pretty_print(f'Response: {response}')
        pretty_print('---')

# Entry point for the script
if __name__ == "__main__":
    main()